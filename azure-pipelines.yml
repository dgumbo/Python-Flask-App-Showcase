# Python to Linux Web App on Azure
# Build your Python project and deploy it to Azure as a Linux Web App.
# Change python version to one thats appropriate for your application.
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  branches:
    include:
    - '*'     # build all branches

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureServiceConnectionId: '58e7659c-72cd-4694-b651-a5d67aed9ce6'
  
  # Web app name
  testWebAppName: 'dgumbo-python-flask'
  productionWebAppName: 'invoicecrm'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Environment name
  environmentName: 'Test'

  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  
  # Python version: 3.7
  pythonVersion: '3.7'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: BuildJob
    pool:
      vmImage: $(vmImageName)
    steps:

    - task: UsePythonVersion@0
      displayName: 'Use Python $(pythonVersion)'
      inputs:
        versionSpec: '$(pythonVersion)'
    
    - script: |
        python -m venv antenv
        source antenv/bin/activate
        python -m pip install --upgrade pip 
      displayName: "Prepare Environment"
      workingDirectory: $(projectRoot)
    
    - script: pip install setup
      displayName: "Setup Environment"
      workingDirectory: $(projectRoot)
    
    - script: pip install -r requirements.txt
      displayName: "Install Requirements"
      workingDirectory: $(projectRoot)

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(projectRoot)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      displayName: 'Upload package'
      artifact: drop

- stage: DeployTest
  displayName: 'Deploy to Test Web App'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeploymentToTest
    displayName: 'Deployement Job - Test'
    pool:
      vmImage: $(vmImageName)
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
            displayName: 'Use Python version'

          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App : dgumbo-python-flask'
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              appName: $(testWebAppName)
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip


- stage: DeployProd
  displayName: 'Deploy to Production Web App'
  dependsOn: DeployTest
  condition: |
    and (
      succeeded(),
      or (
        and ( 
          eq(variables['Build.Reason'], 'PullRequest'),
          eq(variables['System.PullRequest.TargetBranch'], 'master')
        ),        
        eq(variables['Build.SourceBranch'], 'refs/heads/master'),        
        eq(variables['Build.SourceBranch'], 'refs/heads/deploy')
      )
    )
  jobs:
  - deployment: DeploymentToProdJob
    displayName: 'Deployement Job - Production'
    pool:
      vmImage: $(vmImageName)
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
            displayName: 'Use Python version'

          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App : dgumbo-python-flask'
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              appName: $(productionWebAppName)
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip